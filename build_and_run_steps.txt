This instruction contains information on how to build and run SDL depending on target OS and HMI type

1. General
1.1. To build SDL for QNX crosscompiling shall be used only
1.2. This instruction is aimed to use single computer for QNX, SDL and Android Simulator. There can be many other configurations but they are out of scope of this document.

2. Known problem
2.1. icons are not shown on Web HMI because it it works on another computer and SDL send absolute local icon's paths
2.2. Bluetooth is not working because of BT stack absence for QNX


3. Preparation steps:
3.1. Linux host preparation for cross platform SDL build
3.1.1. download and install QNX SDP 6.5.0 SP1 cross platform tools for Linux (http://www.qnx.com/download/download/21179/qnxsdp-6.5.0-201007091524-linux.bin)
     Note: it is necessary to obtain license key either trial or commercial one
3.1.2. During tools installation set checkbox for "GNU Public Licence Utility"
3.1.3. if you don't plan to use Android Simulator skip this point. Install and configure Android Simulator according to following instruction https://adc.luxoft.com/confluence/display/APPLINK/How+to+install+and+setup+android+emulator+on+Ubuntu
3.1.4. Download VMWare Player https://my.vmware.com/web/vmware/downloads 
3.1.5. Download QNX image for VMWare from http://www.qnx.com/download/download/23665/650SP1-VM.tar
3.1.6. Extract image from archive and open it in VMWare


4. Configuration steps Server preparation for QNX run
4.1. Linux host: install Open-SSH server on (For XUbuntu run ""sudo apt-get install ssh", for Ubuntu run "sudo apt-get install openssh-server"). Restart computer if necessary.
4.2. QNX server: Run “passwd user” and set new  user id, group (just press enter) and nonempty password
4.3. QNX server: Run "ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key"
4.4. QNX server: Run "ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key"
4.5. QNX server: Run ssh server if it is not running "/usr/sbin/sshd"


5. Build SDL from source
5.1. LinHost: get source code from repository “git checkout <Brance_Name>” to <Project_Root_Src>
5.2. LinHost: create build folder <Project_Root_Bin> somewhere at a disk
5.2. LinHost: enter <Project_Root_Bin> directory 
5.3. LinHost: create build files 
5.3.1. for QNX “cmake -DCMAKE_TOOLCHAIN_FILE=<Project_Root_Src>/qnx_6.5.0_linux_x86.cmake  <Project_Root_Src>”
5.3.2. for Linux with Web HMI "cmake -DDEFAULT_MEDIA_FLAG=ON <Project_Root_Src>"
5.3.3. for Linux with QML HMI "cmake -DDEFAULT_MEDIA_FLAG=ON -DHMI2=ON <Project_Root_Src>"
5.4. LinHost: Configure IP addresses for SDL with Web interface 
5.4.1. LinHost: update SDL config file “<Project_Root_Src>/src/appMain/smartDeviceLink.ini” find  “ServerAddress = ” and replace with SDL server address
5.4.2. LinHost: update Web HMI network parameters: in file “<Project_Root_Src>/src/components/HMI/ffw/RPCClient.js” find “url: "ws://localhost:8087"” or "url: FLAGS.WEBSOCKET_URL" and replace with SDL server address
5.5. LinHost: run build process “make install”


6. Common run on Linux host (SDL + HMI)
6.1. goto binary folder "cd <Project_Root_Bin>/bin"
6.2. run SDL "./smartDeviceLinkCore". Note: HMI shall be started automatically. Type of HMI depends on build options

       
7. Common run on QNX host
7.1. QnxServ: run terminal
7.2. QnxServ: download binary folder “scp -r <linux_host_user>@<linux_host_ip>:/<Project_Root_Bin>/bin/* ./”
7.3. QnxServ: start SDL “./smartDeviceLinkCore”.


8. Run Web version on QNX host
8.1. execute 7.1, 7.2, 7.3. Note that SLD must be built for QNX with Web interface option
8.2. LinHost: start Chrome “chromium-browser '<Project_Root_Src>/src/components/HMI/index.html'”. Note: if there is no connection with Web HMI probably it is necessary to add QNX Server IP to "no_proxy" config.




