This instruction contains the information on how to build and run SDL depending on target OS and HMI type

1. General
 1.1. To build SDL for QNX, cross-compiling only shall be used.
 1.2. To run SDL under Linux with Web HMI please follow         steps: 3.1; 5; 6.
 1.3. To run SDL under Linux with QML HMI please follow         steps: 3.1; 5; 6.
 1.4. To run SDL under virtualizied QNX with Web HMI under Linux Host please follow   steps: 3.1; 3.2; 3.3; 4.1; 5; 7; 8.
 1.5. To run SDL under virtualizied QNX with QML HMI under Linux Host please follow   steps: 3.1; 3.2; 3.3; 4.2; 5; 9.
 1.6. To run SDL under virtualizied QNX with QML HMI under QNX Host please follow     steps: 3.1; 3.2; 3.3; 5; 7.
 1.7. To turn media features (like audio/video streaming) on/off please set DEFAULT_MEDIA_FLAG to ON/OFF (e.g. "cmake -DEFAULT_MEDIA_FLAG=OFF").
      Note: Don’t mix up with BUILD_MEDIA_MANAGER flag.

==========================================================================================================
2. Known problems.
 2.1. Web HMI does not display icons in case it is running on distant computer (the reason: SDL sends absolute paths on local computer).
 2.2. Bluetooth does not work under QNX (the reason: BT stack absence for QNX).


==========================================================================================================
3. Preparation steps.
  Note: see '1. General' to determine which of the below steps must be used.

 3.1. To prepare the Linux Host:
    Note: in case Ubuntu/Xubuntu 12.04 is already installed, git repository is cloned and is switched to <Main_Develop> branch, proceed from the step 3.1.6.
  3.1.1. Install Ubuntu/Xubuntu 12.04 or higher.
  3.1.2. Configure source repositories (check "Canonical Partners" repositories in Update Manager->Settings->SW source).
  3.1.3. Perform "sudo apt-get install git" command in terminal.
  3.1.4. Clone git repository with "git clone git@adc.luxoft.com:applink".
	 Note: the permissions to download the repository are required. Apply PSavyelyev@luxoft.com on this matter.
  3.1.5. Switch to <Main_Develop> branch: "git checkout <Main_Develop>".
  3.1.6. Run "./setup_env.sh -a" to install all mandatory and optional packages.
	 Note: read the built-in setup environment help ("./setup_env.sh --help") which provides the description of predefined options:
     a) for Web HMI, b) for QML HMI, c) for QNX support.

 3.2. To set up QNX cross platform build for Linux:
  3.2.1.  Download and install QNX SDP 6.5.0 SP1 cross platform tools for Linux (http://www.qnx.com/download/download/21179/qnxsdp-6.5.0-201007091524-linux.bin).
	Note: it is necessary to obtain license key: either trial or commercial one (Register on http://www.qnx.com/ website, enter 'QNX product evaluation' and apply for a license key).
	Note: during tools installation mark "GNU Public Licence Utility" check-box.
  3.2.2. SSH configuration on Linux host:
   3.2.2.1. Install Open-SSH server (For Xubuntu run "sudo apt-get install ssh", for Ubuntu run "sudo apt-get install openssh-server"). 
   3.2.2.1. Restart computer if necessary.
  3.2.3. SSH configuration on QNX server:
   3.2.3.1. Run “passwd user” and set the new user id (just press enter), group (just press enter) and non-empty password.
   3.2.3.2. Run "ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key".
   3.2.3.3. Run "ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key".
   3.2.3.4. Run ssh server if it is not running "/usr/sbin/sshd".
  3.2.4. D-Bus configuration on QNX server (for more details see https://adc.luxoft.com/confluence/display/APPLINK/How+to+install+D-Bus)
   3.2.4.1. Download 'D-Bus' version 1.7.8 and 'Expat' version 2.1.0 (http://dbus.freedesktop.org/releases/dbus/dbus-1.7.8.tar.gz, http://sourceforge.net/projects/expat/files/expat/2.1.0/expat-2.1.0.tar.gz/download)
   3.2.4.2. Execute the following commands:
	  "tar -xf dbus-1.7.8.tar.gz"
	  "cd dbus-1.7.8"
	  "./configure --prefix=${QNX_TARGET}/usr --host=x86-nto CC=ntox86-gcc LDFLAGS='-L${QNX_TARGET}/usr/lib' CFLAGS='-I${QNX_TARGET}/usr/include' --disable-tests"
	  "make"
	  "sudo make install"
	  su -c "make installlib"
	  tar -xf dbus-1.7.8.tar.gz
	  cd dbus-1.7.8
	  ./configure --prefix=/usr LDFLAGS='-L/usr/lib' CFLAGS='-I/usr/include'
	  make
	  su make install
	  su -c "chmod +x /usr/bin/dbus-daemon"
	  run "dbus-daemon"
  3.2.5. Log4cxx installing for QNX
    3.2.5.1. Download log4cxx development archive "log4cxx.qnx.cross.build.files.zip" and runtime archive "log4cxx.qnx.runtime.files.zip"
      Note: For development purpose use git folder git@adc.luxoft.com:applink/src/thirdPartyLibs/
            For releases purpose use delivery svn folder https://adc.luxoft.com/svn/APPLINK/doc/technical/Delivery/{Release_name}/binaries/qnx650
    3.2.5.2. Unpack crossbuild archive of log4cxx on Linux host “unzip ./log4cxx.qnx.cross.build.files.zip -d /”
    3.2.5.3. Download log4cxx runtime archive to QNX “scp <linuxhost_user>@<linuxhost_ip>:/<Delivery_Package_Path>/ log4cxx.qnx.runtime.files.zip ./”
    3.2.5.4. Unpack on QNX server log4cxx binary files of log4cxx QNX port “unzip ./log4cxx.qnx.runtime.files.zip -d /” (this file is also located in git)

 3.3. To run QNX in virtual machine:
  3.3.1. Download VMWare Player https://my.vmware.com/web/vmware/downloads
  3.3.2. Download the archived QNX image for VMWare from http://www.qnx.com/download/download/23665/650SP1-VM.tar
  3.3.3. De-archive the image and open it in VMWare

 3.4. To set up Android Simulator for using instead of real device:
  3.4.1. Install and configure the Android Simulator in keeping with the following instructions https://adc.luxoft.com/confluence/display/APPLINK/How+to+install+and+setup+android+emulator+on+Ubuntu


==========================================================================================================
4. Configuration steps.
  Note: see '1. General' to determine which of the below steps must be used.

 4.1. Use this step if Web HMI and SDL are running on separate computers (virtualized QNX is also considered to be running on a separate computer):
  4.1.1. LinHost: update SDL config file “<Project_Root_Src>/src/appMain/smartDeviceLink.ini”: find  “ServerAddress = ” there and replace the value with <SDL server address>.
  4.1.2. LinHost: update Web HMI network parameters: in file “<Project_Root_Src>/src/components/HMI/ffw/RPCClient.js” find “url: ” and replace the value ("ws://localhost:8087" or FLAGS.WEBSOCKET_URL) with <SDL server address>.
	Note: <SDL server address> is the IP of the computer where SDL is running.

 4.2. Use this step if QML HMI and SDL are running on separate computers (virtualized QNX is also considered to be running on a separate computer):
  4.2.1. QNXServer: add the following lines in the file "/usr/etc/dbus-1/session.conf":
      "<listen>tcp:host=IP-OF-YOUR-QNX-PC,port=PORT-FOR-LISTEN</listen>
      <allow_anonymous/>"
	  (e.g. <listen>tcp:host=192.168.177.128,port=8087</listen>
			<allow_anonymous/>).
  4.2.2. LinHost: set up "export DBUS_SESSION_BUS_ADDRESS=tcp:host=<HOST>,port=<PORT>" on HMI side (e.g. "export DBUS_SESSION_BUS_ADDRESS=tcp:host=192.168.177.128,port=8087").



==========================================================================================================
5. Build SDL from source.
 5.1. LinHost: create a build folder <Project_Root_Bin> somewhere at a disk.
 5.1. LinHost: enter the <Project_Root_Bin> directory.
 5.2. LinHost: create the build files choosing the appropriate step among the following depending on the target OS:
  5.2.1. for QNX: “cmake -DCMAKE_TOOLCHAIN_FILE=<Project_Root_Src>/qnx_6.5.0_linux_x86.cmake  <Project_Root_Src>”.
  5.2.2. for Linux with Web HMI: "cmake -DDEFAULT_MEDIA_FLAG=ON <Project_Root_Src>".
  5.2.3. for Linux with QML HMI: "cmake -DDEFAULT_MEDIA_FLAG=ON -DHMI2=ON <Project_Root_Src>".
    Note: in above cases the <Project_Root_Src> is the path to 'Project_Root_Src' git folder (e.g. "/home/user_name/Work/Project_Root_src").
 5.3. LinHost: run build process “make install”.


==========================================================================================================
6. Common run on Linux host (SDL + HMI).
 6.1. Go to the binary folder "cd <Project_Root_Bin>/bin".
 6.2. Run SDL "./smartDeviceLinkCore".
    Note: HMI shall be started automatically. Type of started HMI depends on build options described in 5.2.


==========================================================================================================
7. Common run on QNX host.
 7.1. QnxServ: run terminal.
 7.2. QnxServ: download binary folder “scp -r <linux_host_user>@<linux_host_ip>:/<Project_Root_Bin>/bin/* ./” .
 7.3. QnxServ: start SDL “./smartDeviceLinkCore”.


==========================================================================================================
8. Run Web version on QNX host.
 8.1. Perform step 7.
 8.2. LinHost: start Chrome “chromium-browser '<Project_Root_Src>/src/components/HMI/index.html'”.
    Note: in case there is no connection with Web HMI probably it is necessary to add QNX Server IP to "no_proxy" config.

==========================================================================================================
9. Run SDL on QNX Server and QML HMI on Linux host.
 9.1. Perform step 7.
 9.2. Run "<QT_HOME_DIR>/qmlscene -I ./hmi/plugins ./hmi/MainWindow.qml".
