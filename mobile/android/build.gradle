import org.codehaus.groovy.runtime.StackTraceUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}

int[] sdksAvailable() {
    def androidPath = androidSdkPath() + '/tools/android'
    def sdks = new ByteArrayOutputStream()

    exec {
        commandLine androidPath, 'list'
        standardOutput = sdks
    }
    sdks = sdks
            // get the output
            .toString()
            // split to strings
            .split('\n')
            // leave only strings with API levels
            .findAll { it ==~ /\s*API level:.*/ }
            // extract the API levels
            .collect {
            // Since API level now has a letters in the name, for example "API level:L" this is
            // a simple (not a professional) way to accept only numbers
                if ((it =~ /\s*API level:\s*(\d+).*/).size() > 0) {
                    (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger()
                } else {
                    0
                }
            }
            // sort from highest to lowest
            .sort({ a, b -> b <=> a })
    sdks
}

int highestSdkAvailable(int defaultSdk) {
    try {
        def sdks = sdksAvailable()
        def highestSdk = sdks[0]
        if (highestSdk != null) {
            println "Using highest found SDK " + highestSdk
            highestSdk
        } else {
            println "No installed SDKs found. Using default SDK " + defaultSdk
            defaultSdk
        }
    } catch (any) {
        println "Exception while determining highest SDK. Using default SDK " +
                defaultSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultSdk
    }
}

String androidSDKDir() {
    String androidExecPath = androidSdkPath()  + '/tools/android'
    file(androidExecPath.toString().trim()).getParentFile().getParentFile()
}

String androidSdkPath() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def androidExecPath = properties.getProperty('sdk.dir')
    androidExecPath
}

String[] buildToolsAvailable() {
    // the Android SDK directory structure that the function relies upon is:
    // android-sdk/tools/android      // <- the android executable
    //            /build-tools/       // <- different build tools versions here
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    buildToolsDir.list().findAll{ it =~ /^\d+/ }.sort { a, b -> b <=> a }
}

String latestBuildToolsAvailable(String defaultBuildTools) {
    try {
        def buildToolsVersions = buildToolsAvailable()
        def latestBuildTools = buildToolsVersions[0]
        if (latestBuildTools != null) {
            println "Using latest found build tools " + latestBuildTools
            latestBuildTools
        } else {
            println "No installed build tools found. Using default build tools " +
                    defaultBuildTools
            defaultBuildTools
        }
    } catch (any) {
        println "Exception while determining latest build tools. Using default build tools " +
                defaultBuildTools
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultBuildTools
    }
}

ext.compileSdkVersion = highestSdkAvailable(19)
ext.buildToolsVersion = latestBuildToolsAvailable("19.1.0")
