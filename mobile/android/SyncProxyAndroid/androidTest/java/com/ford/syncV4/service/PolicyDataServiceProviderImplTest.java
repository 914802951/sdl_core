package com.ford.syncV4.service;

import com.ford.syncV4.net.HttpRequestParameters;
import com.ford.syncV4.net.IDataDownloader;
import com.ford.syncV4.net.parser.RequestAbstractDataParser;
import com.ford.syncV4.net.parser.RequestJSONDataParser;

import junit.framework.TestCase;

import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import static org.mockito.Mockito.mock;

import java.nio.charset.Charset;

/**
 * Created with Android Studio.
 * Author: Chernyshov Yuriy - Mobile Development
 * Date: 08.08.14
 * Time: 17:13
 */
public class PolicyDataServiceProviderImplTest extends TestCase {

    private static final String TEST_JSON = "{\"HTTPRequest\":{\"headers\":{\"ContentType\":\"application/json\",\"ConnectTimeout\":60,\"DoOutput\":true,\"DoInput\":true,\"UseCaches\":false,\"RequestMethod\":\"POST\",\"ReadTimeout\":60,\"InstanceFollowRedirects\":false,\"charset\":\"utf-8\",\"Content-Length\":13465},\"body\":\"{\\\"data\\\":[\\\"\\\"]}\"}}";

    public void testGetPolicyTableUpdateDataExecuteRequestWithCorrectParameters() {
        String url = "http://www.google.com";
        RequestAbstractDataParser dataParser = new RequestJSONDataParser();
        IDataDownloader downloader = mock(IDataDownloader.class);
        IDataServiceProvider serviceProvider = new PolicyDataServiceProviderImpl(dataParser);

        byte[] responseData = serviceProvider.getPolicyTableUpdateData(downloader, url,
                TEST_JSON.getBytes(Charset.forName("UTF-8")));

        ArgumentCaptor<HttpRequestParameters> argumentCaptor =
                ArgumentCaptor.forClass(HttpRequestParameters.class);
        Mockito.verify(downloader, Mockito.times(1)).downloadDataFromUri(argumentCaptor.capture());
    }
}