/*
 * 
 * @name UI
 * 
 * @desc UI functionality
 * 
 * @category    HMI
 * @version 1.0
 *
 * @author  
 *
 */

// all classes belong from namespace example
interface RPC2Communication::UI;

version "1.2";

/*
all classes derived from xml searches in namespace xx.
this directive is optional and may be overwriten by generator flag -n
*/

using AppLinkRPC;

// all method names will be prefixed by 'test.', prefix append on wire only, not in C++ names
// using of full power of c string notation possible, i.e. "some\tclass\b\x02#$#$\"\\" is valid prefix
prefix "UI.";

#if 0
/*
 The only currently supported Json RPC version is 2.0
*/

envelope "JSON-RPC 2.0";

// The following is for RPCBus controller:
//serviceUrl "/localhost:6087";

#endif

/*
   * @descr 
   *      Show information in app window, in predefined positions
   *  
   * @returns
   *  result of command execution
   *  
   */ 
Show(string(500) * mainField1,
    string(500) * mainField2, 
    TextAlignment * alignment,  //data type from AppLink protocol specification  
    string(500) * statusBar,
    string(500) *mediaClock, 
    string(500) *mediaTrack  
    -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *       Show Alert to the user and play sound tone if necessary
   *  
   * @returns
   *   result of command execution
   *  
   */ 
Alert(
  string(500) * AlertText1,
  string(500) * AlertText2,
  unsigned int(3000:10000) * duration,
  bool * playTone
  -> );  // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      add new command to UI
   *  
   * @returns
   *  result code
   */ 
AddCommand(
  unsigned int (2000000000) cmdId,  // cmdID from addCommand request in AppLink protocol
  MenuParams menuParams   //data type from AppLink protocol specification
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      add new command to UI
   *  
   * @returns
   *  result code
   */ 
DeleteCommand(
  unsigned int (2000000000) cmdId  // cmdID from addCommand request in AppLink protocol
  -> );  // return value is provided in corresponding response object, id of request and response should be equal


/*
   * @descr 
   *      add sub menu
   *      parameters are copied from AddSubMenu in AppLink protocol
   *  
   * @returns
   *  result code
   */ 
AddSubMenu(
  unsigned int (2000000000) menuId,
  unsigned int (1000) * position,
  string(500) menuName
  -> );  // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      delete sub menu
   *      parameters are copied from DeleteSubMenu in AppLink protocol
   *  
   * @returns
   *  result code
   */ 
DeleteSubMenu(
  unsigned int (2000000000) menuId
  -> );  //// return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      create new interaction choice set
   *      parameters are copied from CreateInteractionChoiceSet in AppLink protocol
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
CreateInteractionChoiceSet(
  unsigned int (2000000000) interactionChoiceSetID,
  Choice choiceSet[1:100]   // data type from AppLink protocol specification
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      delete new interaction choice set
   *      parameters are copied from DeleteInteractionChoiceSet in AppLink protocol
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
DeleteInteractionChoiceSet(
  unsigned int(2000000000) interactionChoiceSetID
  -> );  // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      Triggers an interaction (e.g. "Permit GPS?" - Yes, no, Always Allow
   *      parameters are copied from PerformInteraction in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
PerformInteraction(
  string(500) initialText,
  TTSChunk initialPrompt[1:100], //data type from AppLink protocol specification
  InteractionMode interactionMode, // data type from AppLink protocol specification
  unsigned int (2000000000)  interactionChoiceSetIDList[1:100],// List of interaction choice set IDs to use with an interaction
  TTSChunk * helpPrompt[1:100], //data type from AppLink protocol specification
  TTSChunk * timeoutPrompt[1:100], // data type from AppLink protocol specification
  unsigned int (5000:100000) * timeout //in milliseconds
  -> 
  unsigned int (2000000000) * choiceID, // ID of the choice that was selected in response to PerformInteraction
  TriggerSource * triggerSource //data type from AppLink protocol specification
  );

/*
   * @descr 
   *      start media clock timer
   *      parameters are copied from SetMediaClockTimer in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
SetMediaClockTimer(
  StartTime * startTime, // data type from AppLink protocol specification
  UpdateMode updateMode  // data type from AppLink protocol specification
  -> );// return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      set global properties for timeout prompt and help prompt
   *      parameters are copied from SetGlobalProperties in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
SetGlobalProperties(
  TTSChunk * helpPrompt[1:100], // data type from AppLink protocol specification
  TTSChunk * timeoutPrompt[1:100] // data type from AppLink protocol specification
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      reset global properties for timeout prompt and help prompt
   *      parameters are copied from SetGlobalProperties in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
ResetGlobalProperties(
  GlobalProperty properties[1:100] // enum, data type from AppLink protocol specification
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr Notifies AppLink core about command trigerred by UI
   */
oneway  OnCommand (
  unsigned int (2000000000) commandId // id of triggered command
  );

/*
   * @descr Notifies AppLink if application is activated (switched from background to foreground) by UI
   */
oneway OnAppActivated(
  string(100) appName
);

/*
   * @descr Notifies AppLink if application is deactivated (switched from background to foreground )
   */
oneway OnAppDeactivated(
  string(100) appName
);

// TODO: not sure  if it is correct place for this method
  // TODO: what's about VR session in progress?
  /*
   * @descr Notifies if system context is changed
   */
oneway OnSystemContext(
  SystemContext systemContext
  );

/*
   * @descr 
   *      method should be invoked at system startup
   *  provides information about UI capabilities
   *  
   * @returns
   *    UI Display capabilites
   */
GetCapabilities(
  ->
  DisplayCapabilities capabilities, // data type from AppLink protocol specification
  HmiZoneCapabilities capabilities[1:100] // data type from AppLink protocol specification
  );

/*
"id": "integer" //REQUIRED for request methods. NOT to be used for notifications
*/
