/*
 * 
 * @name RPC2Spec
 * 
 * @desc UI, VR, TTS, Buttons, ApplinkCore functionality
 * 
 * @category    HMI
 * @version 1.0
 *
 * @author  PVyshnevska
 *
 */

 interface NsRPC2Communication::UI
 {

version "1.2";

/*
all classes derived from xml searches in namespace xx.
this directive is optional and may be overwriten by generator flag -n
*/

//using AppLinkRPC;

// all method names will be prefixed by 'test.', prefix append on wire only, not in C++ names
// using of full power of c string notation possible, i.e. "some\tclass\b\x02#$#$\"\\" is valid prefix
prefix "UI.";

#if 0
/*
 The only currently supported Json RPC version is 2.0
*/

envelope "JSON-RPC 2.0";

// The following is for RPCBus controller:
//serviceUrl "/localhost:6087";

#endif

/*
   * @descr 
   *      Show information in app window, in predefined positions
   *  
   * @returns
   *  result of command execution
   *  
   */ 
Show(string(500) * mainField1,
    string(500) * mainField2, 
    string(500) * mainField3,
    string(500) * mainField4,
    TextAlignment * alignment,  //data type from AppLink protocol specification  
    string(500) * statusBar,
    string(500) *mediaClock, 
    string(500) *mediaTrack,
    Image * graphic, // Image struct determining whether static or dynamic image to display in app
    SoftButton * softButtons[0:8], // App defined SoftButtons
    string(500) * customPresets[0:6], // App labeled on-screen presets (i.e. GEN2)
    int appId
    -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *       Show Alert to the user and play sound tone if necessary
   *  
   * @returns
   *   result of command execution
   *  
   */ 
Alert(
  string(500) * AlertText1,
  string(500) * AlertText2,
  string(500) * alertText3,
  TTSChunk * ttsChunks[1:100],
  unsigned int(3000:10000) * duration,
  bool * playTone,
  SoftButton * softButtons[0:4], // App defined SoftButtons
  int appId
  -> 
  unsigned int (2000000000) * tryAgainTime  // Amount of time (in seconds) that an app must wait before resending an alert.
);  // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      add new command to UI
   *  
   * @returns
   *  result code
   */ 
AddCommand(
  unsigned int (2000000000) cmdId,  // cmdID from addCommand request in AppLink protocol
  MenuParams menuParams,   //data type from AppLink protocol specification
  Image * cmdIcon, // Image struct determining whether static or dynamic icon
  int appId
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      add new command to UI
   *  
   * @returns
   *  result code
   */ 
DeleteCommand(
  unsigned int (2000000000) cmdId,  // cmdID from addCommand request in AppLink protocol
  int appId
  -> );  // return value is provided in corresponding response object, id of request and response should be equal


/*
   * @descr 
   *      add sub menu
   *      parameters are copied from AddSubMenu in AppLink protocol
   *  
   * @returns
   *  result code
   */ 
AddSubMenu(
  unsigned int (2000000000) menuId,
  unsigned int (1000) * position,
  string(500) menuName,
  int appId
  -> );  // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      delete sub menu
   *      parameters are copied from DeleteSubMenu in AppLink protocol
   *  
   * @returns
   *  result code
   */ 
DeleteSubMenu(
  unsigned int (2000000000) menuId,
  int appId
  -> );  //// return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      create new interaction choice set
   *      parameters are copied from CreateInteractionChoiceSet in AppLink protocol
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
CreateInteractionChoiceSet(
  unsigned int (2000000000) interactionChoiceSetID,
  Choice choiceSet[1:100],   // data type from AppLink protocol specification
  int appId
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      delete new interaction choice set
   *      parameters are copied from DeleteInteractionChoiceSet in AppLink protocol
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
DeleteInteractionChoiceSet(
  unsigned int(2000000000) interactionChoiceSetID,
  int appId
  -> );  // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      Triggers an interaction (e.g. "Permit GPS?" - Yes, no, Always Allow
   *      parameters are copied from PerformInteraction in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
PerformInteraction(
  string(500) initialText,
  TTSChunk initialPrompt[1:100], //data type from AppLink protocol specification
  InteractionMode interactionMode, // data type from AppLink protocol specification
  unsigned int (2000000000)  interactionChoiceSetIDList[1:100],// List of interaction choice set IDs to use with an interaction
  TTSChunk * helpPrompt[1:100], //data type from AppLink protocol specification
  TTSChunk * timeoutPrompt[1:100], // data type from AppLink protocol specification
  unsigned int (5000:100000) * timeout, //in milliseconds
  VrHelpItem * vrHelp[1:100], // Ability to send suggested VR Help Items to display on-screen during Perform Interaction
  int appId
  -> 
  unsigned int (2000000000) * choiceID, // ID of the choice that was selected in response to PerformInteraction
  TriggerSource * triggerSource //data type from AppLink protocol specification
  );

/*
   * @descr 
   *      start media clock timer
   *      parameters are copied from SetMediaClockTimer in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
SetMediaClockTimer(
  StartTime * startTime, // data type from AppLink protocol specification
  UpdateMode updateMode,  // data type from AppLink protocol specification
  int appId
  -> );// return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      set global properties for timeout prompt and help prompt
   *      parameters are copied from SetGlobalProperties in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
SetGlobalProperties(
  TTSChunk * helpPrompt[1:100], // data type from AppLink protocol specification
  TTSChunk * timeoutPrompt[1:100], // data type from AppLink protocol specification
  string(500) * vrHelpTitle, // VR Help Title text 
  VrHelpItem * vrHelp[1:100], // VR Help Items
  int appId
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr 
   *      reset global properties for timeout prompt and help prompt
   *      parameters are copied from SetGlobalProperties in AppLink protocol
   * 
   *  // TODO: clarify if it is correct approach
   *  
   * @returns
   *  result code
   */ 
ResetGlobalProperties(
  GlobalProperty properties[1:100], // enum, data type from AppLink protocol specification
  int appId
  -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
   * @descr Notifies AppLink core about command trigerred by UI
   */
notification  OnCommand (
  unsigned int (2000000000) commandId, // id of triggered command
  int appId
  );


// TODO: not sure  if it is correct place for this method
  // TODO: what's about VR session in progress?
  /*
   * @descr Notifies if system context is changed
   */
notification OnSystemContext(
  SystemContext systemContext
  );

/*
   * @descr 
   *      method should be invoked at system startup
   *  provides information about UI capabilities
   *  
   * @returns
   *    UI Display capabilites
   */
GetCapabilities(
  ->
  DisplayCapabilities displayCapabilities, // data type from AppLink protocol specification
  HmiZoneCapabilities hmiZoneCapabilities[1:100], // data type from AppLink protocol specification
  SoftButtonCapabilities * softButtonCapabilities[1:100] // If returned, the platform supports on-screen SoftButtons
  );

/*
  * @descr 
   *      Notification is sent from HMI to AppManager on showing warning
   *  to user.
   *  
   */
notification OnDriverDistraction(
    DriverDistractionState state // data type from AppLink protocol specification
  );

/*
  * @descr 
   *      HMI notifies AppManager about its readiness.
   *  to user.
   *  
   */
notification OnReady(
);

/*
  * @descr 
   *      Request from AppLink to HMI to change display language for app.
   *  to user.
   *  
   */
ChangeRegistration(
  Language hmiDisplayLanguage, //  data type from AppLink protocol specification
  int appId
  ->
);

/*
  * @descr 
   *      Request from Applink to HMI to get the currently active  UI language
   *  
   */
GetLanguage(
  ->
  Language hmiDisplayLanguage
);
/*
  * @descr 
   *      Used to set existing local file on SYNC as the app's icon.
   *  
   */
SetAppIcon(
  string(500) syncFileName, // path to file to be used as app icon
  int appId
  ->
);

/*
  * @descr 
   *      Notification from HMI to AppLink about change of display language for app.
   *  to user.
   *  
   */
notification OnLanguageChange(
  Language hmiDisplayLanguage, //  data type from AppLink protocol specification
  int appId
);

/*
  * @descr 
   *      Notification from HMI to AppLink when user chooses device
   *  
   */
notification OnDeviceChosen(
    string deviceName
);

/*
  * @descr 
   *      Request from AppLink to HMI to show slider. Returns position.
   *  
   */
Slider(
  unsigned int (2:26) numTicks,
  unsigned int (1:16) position,
  string (500) sliderHeader,
  string (500) * sliderFooter[1:26],
  unsigned int (65535) timeout,
  int appId
  ->
  unsigned int (1:26) sliderPosition
);

/*
  * @descr 
   *      Request from AppLink to HMI:
   * Creates a full screen overlay containing a large block of 
   * formatted text that can be scrolled with up to 8 SoftButtons defined
   */
ScrollableMessage(
  string(500) scrollableMessageBody,
  unsigned int (65535) * timeout,
  SoftButton * softButtons[0:8],
  int appId
  -> // return value is provided in corresponding response object, id of request and response should be equal
);

/*
  * @descr 
   *      Request from AppLink to HMI:
   * Used to set an alternate display layou 
   * If not sent, default screen for given platform will be shown
   */
SetDisplayLayout(
  string displayLayout, //Predefined or dynamically created screen layout, Currently only predefined screen layouts are defined: ONSCREEN_PRESETS
  int appId
  -> // return value is provided in corresponding response object, id of request and response should be equal
);

}


 interface NsRPC2Communication::VR
 {

 version "1.2";

// using AppLinkRPC;

prefix "VR.";

#if 0
/*
 The only currently supported Json RPC version is 2.0
*/

envelope "JSON-RPC 2.0";

// The following is for RPCBus controller:
//serviceUrl "/localhost:6087";

#endif

/*
     * @descr 
     *      method should be invoked at system startup
     *  provides information about voice recognition capabilities
     *  
     * @returns
     *      VR capabilites
     */ 
GetCapabilities(
    ->
    VrCapabilities capabilities[1:100] // data type from AppLink protocol specification
);

/*
     * @descr 
     *      add new command to VR
     *  
     * @returns
     *  result code
     */ 
AddCommand(
    unsigned int (2000000000) cmdId, // cmdID from addCommand request in AppLink protocol
    string (99) vrCommands [1:100], //An array of strings to be used as VR sysnonyms for this command
    int appId
    -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
     * @descr 
     *      delete commands from VR
     *  
     * @returns
     *  result code
     */ 
DeleteCommand(
    unsigned int (2000000000) cmdId, // cmdID from addCommand request in AppLink protocol
    int appId
    -> ); // return value is provided in corresponding response object, id of request and response should be equal

/*
     * @descr Notifies AppLink core about command trigerred by VR
     */
notification OnCommand(
    unsigned int (2000000000) cmdID, // id of triggered command
    int appId
    );

  /*
  * @descr 
   *      Request from AppLink to HMI to change language for app.
   *  to user.
   *  
   */
ChangeRegistration(
  Language language, //  data type from AppLink protocol specification
  int appId
  ->
);
/*
  * @descr 
   *      Notification from HMI to AppLink about change of  language for app.
   *  to user.
   *  
   */
notification OnLanguageChange(
  Language language, //  data type from AppLink protocol specification
  int appId
);

/*
  * @descr 
   *      Request from Applink to HMI to get currently active  VR language
   *  
   */
GetLanguage(
  ->
  Language language
);
}


interface NsRPC2Communication::TTS
{

version "1.2";

//using AppLinkRPC;

prefix "TTS.";

#if 0
/*
 The only currently supported Json RPC version is 2.0
*/

envelope "JSON-RPC 2.0";

// The following is for RPCBus controller:
//serviceUrl "/localhost:6087";

#endif

/*
     * @descr 
     *      method should be invoked at application registration
     *  provides information about TTS capabilities
     *  
     * @returns
     *      TTS capabilites
     */ 
GetCapabilities(
    -> 
    SpeechCapabilities capabilities[1:100] // data type from AppLink protocol specification
    );

/*
     * @descr 
     *      method should be invoked to perform text to speech
     *  
     * @returns
     *      result code of execution
     */ 
Speak(
    TTSChunk ttsChunks [1:100], // data type from AppLink protocol specification
    int appId
    -> ); // return value is provided in corresponding response object, id of request and response should be equal

 /*
  * @descr 
   *      Request from AppLink to HMI to change language for app.
   *  to user.
   *  
   */
ChangeRegistration(
  Language language, //  data type from AppLink protocol specification
  int appId
  -> // return value is provided in corresponding response object, id of request and response should be equal
);
/*
  * @descr 
   *      Notification from HMI to AppLink about change of  language for app.
   *  to user.
   *  
   */
notification OnLanguageChange(
  Language language, //  data type from AppLink protocol specification
  int appId
);

/*
  * @descr 
   *      Request from Applink to HMI to get currently active TTS language
   *  
   */
GetLanguage(
  ->
  Language language
);

/*
  * @descr 
   *      Request from AppLink to HMI to start audio pass through session
   *  to user.
   *  
   */
PerformAudioPassThru(
  TTSChunk initialPrompt[1:100], //SYNC will speak this prompt before opening the audio pass thru sessio
  string(500) * audioPassThruDisplayText1, //Line of text displayed during audio capture
  string(500) * audioPassThruDisplayText2, //Line of text displayed during audio capture
  SamplingRate samplingRate, //This value shall be allowed at 8 khz or 16 or 22 or 44 khz.
  unsigned int(1000000) maxDuration, //The maximum duration of audio recording in milliseconds
  AudioCaptureQuality bitsPerSample, //Specifies the quality the audio is recorded. Currently 8 bit or 16 bit
  AudioType audioType, //Specifies the type of audio data being requested
  int appId
  ->// return value is provided in corresponding response object, id of request and response should be equal
);

/*
  * @descr 
   *      Request from AppLink to HMI: when this request is invoked, the audio capture stops
   *  to user.
   *  
   */
EndAudioPassThru(
  int appId
  -> // return value is provided in corresponding response object, id of request and response should be equal
);

/*
  * @descr Notification from HMI to Applink
   */
notification OnAudioPassThru(
  int appId
);

}


interface NsRPC2Communication::Buttons
{

version "1.2";

//using AppLinkRPC;

prefix "Buttons.";

#if 0
/*
 The only currently supported Json RPC version is 2.0
*/

envelope "JSON-RPC 2.0";

// The following is for RPCBus controller:
//serviceUrl "/localhost:6087";

#endif

/*
     * @descr 
     *      method should be invoked at system startup
     *  provides information about all supported hardware buttons and their capabilites
     *  
     * @returns
     *      button capabilites
     *      array of supported buttons
     */
GetCapabilities(
    ->
    ButtonCapabilities capabilities[1:100], // data type from AppLink protocol specification
    PresetBankCapabilities * presetBankCapabilities // If returned, the platform supports custom on-screen Presets
);

/*
     * @descr Notifies application of UP/DOWN events for buttons
     */
notification OnButtonEvent(
    ButtonName name,  // data type from AppLink protocol specification
    ButtonEventMode mode,  // data type from AppLink protocol specification
    unsigned int (65536) * customButtonID // If ButtonName is “CUSTOM_BUTTON", this references the integer ID passed by a custom button. (e.g. softButtonName)
);

/*
     * @descr Notifies application of LONG/SHORT press events for buttons
     */
notification OnButtonPress(
    ButtonName name,  // data type from AppLink protocol specification
    ButtonPressMode mode,  // data type from AppLink protocol specification
    unsigned int (65536) * customButtonID // If ButtonName is “CUSTOM_BUTTON", this references the string passed by a custom button. (e.g. softButtonName)
);
}

 interface NsRPC2Communication::AppLinkCore
 {

version "1.2";

//using AppLinkRPC;

prefix "AppLinkCore.";

#if 0
/*
 The only currently supported Json RPC version is 2.0
*/

envelope "JSON-RPC 2.0";

// The following is for RPCBus controller:
//serviceUrl "/localhost:6087";

#endif

/*
     * @descr 
     *     this methos is usually invoked by HMI to get list of registered apps 
     *  
     *  
     * @returns
     *      the array of rehgistered apps
     *  
     */
GetAppList(
    ->
    HMIApplication appList [] // data specific for RPCBus communication.
    );

    /*
  * @descr 
   *      Request from HMI to AppLink to get the list of devices.
   *  
   */
GetDeviceList(
  ->
  string deviceList [1:100]
);

/*
  * @descr 
   *      Notification from AppLink to HMI about changes in device list.
   *  
   */
notification OnDeviceListUpdated(
  string deviceList [1:100]
);

/*
     * @descr 
     *      Activate app 
     *  Usually invoked by UI component when user click on app in the list of registered apps
     *  
     * @returns
     *      result
     *  
     */ 
ActivateApp(
    string(100) appName,
    int appId
    -> // return value is provided in corresponding response object, id of request and response should be equal
);

/*
     * @descr 
     *      Deactivate app 
     *  Usually invoked by UI component when user chooses non-mobile application on HMI
     *  
     * @returns
     *      result
     *  
     */ 
DeactivateApp(
    string(100) appName,
    DeactivateReason reason, //DeactivateReason : audio, Phone Call, Navigation map, Phone Menu, Sync settings, general
    int appId
    -> // return value is provided in corresponding response object, id of request and response should be equal
);

/*
     * @descr 
     *      Send some data from HMI to AppManager.
     *  
     * @returns
     *      result
     *  
     */
SendData(
  string data[1:100],
  string(1000) * url,
  long int (-2000000000:2000000000) * timeout
  -> //return value is provided in corresponding response object, id of request and response should be equal
);

/*
     * @descr Notifies if new application is registered
     */
notification OnAppRegistered(
    string(100) appName,
    string appIcon,
    string deviceName,
    string(40) * vrSynonym[1:100], // sysnonyms assossiated with app to start it
    bool isMediaApplication,
    Language languageDesired,  // language for VR and TTS
    Language * hmiDisplayLanguageDesired, // language for UI
    TTSChunk * ttsName[1:100], // TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green". Meant to overcome any failing on speech engine in properly pronouncing, understanding app name
    AppType * appType[1:100], // List of all applicable app types stating which classifications to be given to the app
    unsigned int versionNumber,
    int appId
);

/*
     * @descr Notifies if application is unregistered
     */
notification OnAppUnregistered(
    string(100) appName,
    AppInterfaceUnregisteredReason * reason,  // data type from AppLink protocol specification
    int appId
);
}

interface NsRPC2Communication::VehicleInfo
{
version "1.2";

//using AppLinkRPC;

prefix "AppLinkCore.";
 /*
     * @descr Request from ApplinkCore to HMI to get info about the vehicle.
    */ 
GetVehicleType(
    ->
    VehicleType vehicleType // manufacturer, model, year etc of the vehicle.
  ); 
/*
  * @descr Request from ApplinkCore to HMI
  * Subscribes for specific published data items
  * The data will be only sent if it has changed
  * The application will be notified by the onVehicleData notification whenever new data is available.
  */
SubscribeVehicleData(
  VehicleDataType dataType[1:100],
  int appId
  -> //return value is provided in corresponding response object, id of request and response should be equal
  VehicleDataResult * dataResult[1:100] //Permission status of vehicle data element
);

/*
  * @descr Request from ApplinkCore to HMI
  * This function is used to unsubscribe the notifications from the subscribeVehicleData function
  */
UnsubscribeVehicleData(
  VehicleDataType dataType[1:100],
  int appId
  -> 
  VehicleDataResult * dataResult[1:100] //Permission status of vehicle data element
); //return value is provided in corresponding response object, id of request and response should be equal

/*
  * @descr Request from ApplinkCore to HMI
  * Non periodic vehicle data read request
  */
GetVehicleData(
  VehicleDataType dataType,
  int appId
  ->
  GPSData * gps,
  float(-100:500) * speed,
  unsigned int(20000) * rpm, // The number of revolutions per minute of the engine
  float(0:100) * fuelLevel,
  float(0:7000) * avgFuelEconomy, //The average fuel economy in litres/100km
  float(0:26) * batteryVoltage,
  float(-40:100) * externalTemperature, //The external temperature in degrees celsius.
  string(17) * vin, // Vehicle identification number
  PRNDL * prndl,
  TireStatus * tirePressure,
  float(-1000:1000) * batteryPackVoltage,
  float(-1000:1000) * batteryPackCurrent,
  int (-50:250) * batteryPackTemperature,
  int(-10000:55000) * engineTorque,
  unsigned int (2000000) * odometer,
  unsigned int (2000000) * tripOdometer,
  string(500) * satRadioESN //The hexadecimal ESN of the satellite radio (if supported).
);

/*
  * @descr Notification from HMI to Applink
  * Callback for the periodic and non periodic vehicle data read function.
  */
notification OnVehicleData(
  GPSData * gps,
  float(-100:500) * speed,
  unsigned int (20000) * rpm,
  float (0:100) * fuelLevel,
  float (0:7000) * avgFuelEconomy, // The average fuel economy in litres/100km
  float (0:26) * batteryVoltage,
  float (-40:100) * externalTemperature,
  string(17) * vin,
  PRNDL * prndl,
  TireStatus * tirePressure,
  float (-1000:1000) * batteryPackVoltage,
  float (-1000:1000) * batteryPackCurrent,
  int (-50:250) * batteryPackTemperature,
  int (-10000:55000) * engineTorque,
  unsigned int (2000000) * odometer,
  unsigned int (2000000) * tripOdometer,
  string (500) * genericbinary
);

/*
  * @descr Request from ApplinkCore to HMI
  * Non periodic vehicle data read request
  */
ReadDID(
  unsigned int (65535) ecuName,
  unsigned int (65535)  didLocation[0:1000],
  bool * encrypted,
  int appId
  ->
  VehicleDataResultCode * dataResult[0:1000], //Permission status of data element
  string(5000) * data[0:1000] //Raw DID-based data returned for requested element
);

/*
  * @descr Request from ApplinkCore to HMI
  * Vehicle module diagnostic trouble code request.
  */
GetDTCs(
  unsigned int (65535) ecuName,
  bool * encrypted,
  int appId
  ->
  DTC * dtcList[1:100] 
);

}


interface NsRPC2Communication::Phone
{
  version "2.0";

  prefix "Phone.";
/*
     * @descr Request from ApplinkCore to HMI to make a call.
     */ 
DialNumber(
  string(500) number, //Phone number is a string consisting of only the digits and "+", which can be up to 40 chars
  int appId
  -> //return value is provided in corresponding response object, id of request and response should be equal
);

}

interface NsRPC2Communication::Navigation
{
  version "2.0";

  prefix "Navigation.";

/*
     * @descr Request from ApplinkCore to HMI to show info about navigation.
     */ 
ShowConstantTBT(
  string (500) * navigationText1,
  string (500) * navigationText2,
  string (500) * eta,
  string (500) * totalDistance,
  Image turnIcon,
  float (0:1000000000) distanceToManeuver,
  float (0:1000000000) distanceToManeuverScale,
  bool * maneuverComplete,
  SoftButton softButtons[0:3],
  int appId
  -> //return value is provided in corresponding response object, id of request and response should be equal
);

/*
     * @descr Request from ApplinkCore to HMI to announce navigation maneuver
     */ 
AlertManeuver(
  TTSChunk ttsChunks[1:100],
  SoftButton softButtons[0:3],
  int appId
  -> //return value is provided in corresponding response object, id of request and response should be equal
);

/*
     * @descr Request from ApplinkCore to HMI to update turn list.
     */ 
UpdateTurnList(
  Turn turnList[1:100],
  SoftButton softButtons[0:1],
  int appId
  -> //return value is provided in corresponding response object, id of request and response should be equal
);

/*
     * @descr Notification from HMI to ApplinkCore
     * Provides applications with notifications specific to the current TBT client status on the module
     */
notification OnTBTClientState(
  TBTState state
);

}

  /*
"id": "integer" //REQUIRED for request methods. NOT to be used for notifications
*/
