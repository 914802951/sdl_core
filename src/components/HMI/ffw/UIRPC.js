/*
 * Reference implementation of UI component.
 *
 * Interface to get or set some essential information sent from ApplinkCore.
 * UI is responsible for the functionality provided by the application:
 * display graphics and multimedia components, is responsible
 * for the transfer of managed manipulations, generated by the user to the server.
 *
 * @author Andriy Melnik
 */

FFW.UI = FFW.RPCObserver.create({

	/*
	 *	access to basic RPC functionality
 	 */
	 client:		FFW.RPCClient.create({ componentName: "UI" }),

	// temp var for debug
	appId:	1,

	onVRChoiseSubscribeRequestId:		-1,
	onVRChoiseUnsubscribeRequestId:		-1,

	// const
	onVRChoiseNotification:		"VR.OnChoise",

	/*
	 *	ids for requests AudioPassThru
 	 */
	performAudioPassThruRequestId:		-1,
	endAudioPassThruRequestId:			-1,

	/*
   	 * connect to RPC bus
 	 */
	connect: function() {
		this.client.connect(this, 400);
	},

	/*
   	 * disconnect from RPC bus
 	 */
	disconnect: function() {
		this.client.disconnect();
	},

	/*
     * Client is registered - we can send request starting from this point of time
 	 */
	onRPCRegistered: function () {
		Em.Logger.log("FFW.UI.onRPCRegistered");
		this._super();

		// subscribe to notifications
		this.onVRChoiseSubscribeRequestId 	= this.client.subscribeToNotification(this.onVRChoiseNotification);

 		// notify other components that UI is ready
		//  main purpose is to nitofy ALCore
		this.onReady();
	},

	/*
     * Client is unregistered - no more requests
 	 */
	onRPCUnregistered: function () {
		Em.Logger.log("FFW.UI.onRPCUnregistered");
		this._super();

		// unsubscribe from notifications
		this.onVRChoiseUnsubscribeRequestId 	= this.client.unsubscribeFromNotification(this.onVRChoiseNotification);
	},

	/*
	 * Client disconnected.
	 */
	onRPCDisconnected: function() {

	},

	/*
     * when result is received from RPC component this function is called
	 * It is the propriate place to check results of request execution
	 * Please use previously store reuqestID to determine to which request repsonse belongs to
 	 */
	onRPCResult: function(response) {
		Em.Logger.log("FFW.UI.onRPCResult");
		this._super();
	 },

	/*
	 * handle RPC erros here
 	 */
	onRPCError: function(error) {
		Em.Logger.log("FFW.UI.onRPCError");
		this._super();
	},

	/*
	 * handle RPC notifications here
 	 */
	onRPCNotification: function(notification) {
		Em.Logger.log("FFW.UI.onRPCNotification");
		this._super();

		if (notification.method == this.onVRChoiseNotification)
		{
			this.interactionResponse( "SUCCESS", notification.params.choiceId );
		}
	},

	/*
	 * handle RPC requests here
 	 */
	onRPCRequest: function(request) {
		Em.Logger.log("FFW.UI.onRPCRequest");
		this._super();

		var resultCode = null;

		switch (request.method) {
		    case "UI.Show":{
                
                // Close TBT
                MFT.TurnByTurnView.deactivate();
                
				MFT.ApplinkController.getApplicationModel(request.params.appId).onApplinkUIShow(request.params);
                
				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.Alert":{

				MFT.ApplinkModel.onUIAlert( request.params, request.id );

		    	break;
		    }
		    case "UI.SetGlobalProperties":{

				MFT.ApplinkModel.setProperties(request.params);

				this.sendUIResult("SUCCESS", request.id, request.method);

		      	break;
		    }
		    case "UI.ResetGlobalProperties":{

			    // reset all requested properties
				MFT.ApplinkModel.resetProperties(request.params);

				this.sendUIResult("SUCCESS", request.id, request.method);

			    break;
			}
		    case "UI.AddCommand":{

			    MFT.ApplinkController.getApplicationModel(request.params.appId).addCommand(request.params);

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.DeleteCommand":{

				MFT.ApplinkController.getApplicationModel(request.params.appId).deleteCommand(request.params.cmdId);

				this.sendUIResult("SUCCESS", request.id, request.method);

				break;
			}
		    case "UI.AddSubMenu":{

				MFT.ApplinkController.getApplicationModel(request.params.appId).addSubMenu(request.params);

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.DeleteSubMenu":{

				var resultCode =  MFT.ApplinkController.getApplicationModel(request.params.appId).deleteSubMenu(request.params.menuId);

				this.sendUIResult(resultCode, request.id, request.method);

		    	break;
		    }
		    case "UI.CreateInteractionChoiceSet":{

				MFT.ApplinkController.getApplicationModel(request.params.appId).onCreateInteraction(request.params);

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.DeleteInteractionChoiceSet":{

				MFT.ApplinkController.getApplicationModel(request.params.appId).onDeleteInteraction(request.params);

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.PerformInteraction":{

				MFT.ApplinkModel.uiPerformInteraction( request.params, request.id );

		    	break;
		    }
		    case "UI.SetMediaClockTimer":{

				var resultCode = MFT.ApplinkController.getApplicationModel(request.params.appId).applinkSetMediaClockTimer(request.params);

				this.sendUIResult(resultCode, request.id, request.method);

		    	break;
		    }
		    case "UI.OnAppActivated":{

		    	break;
		    }
		    case "UI.Slider":{

				MFT.ApplinkModel.uiSlider( request );

		    	break;
		    }
		    case "UI.ScrollableMessage":{

				MFT.ApplinkModel.onApplinkScrolableMessage( request.params, request.id );

		    	break;
		    }
		    case "UI.ChangeRegistration":{

				MFT.ApplinkModel.changeRegistrationUI( request.params.hmiDisplayLanguage );

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.SetAppIcon":{

				MFT.ApplinkModel.onApplinkSetAppIcon( request.params, request.id, request.method );

		    	break;
		    }
		    case "UI.PerformAudioPassThru":{

		    	this.performAudioPassThruRequestId = request.id;

				MFT.ApplinkModel.UIPerformAudioPassThru( request.params );

		    	break;
		    }
		    case "UI.EndAudioPassThru":{

				this.endAudioPassThruRequestId = request.id;

				MFT.ApplinkModel.UIEndAudioPassThru();

		    	break;
		    }
		    case "UI.GetSupportedLanguages":{

				var JSONMessage = {
					"jsonrpc"	:	"2.0",
					"id"		: 	request.id,
					"result":	{
						"resultCode" : "SUCCESS", //  type (enum) from AppLink protocol
						"method" : "UI.GetSupportedLanguagesResponse",
						"languages" : MFT.ApplinkModel.applinkLanguagesList
					}
				};
				this.client.send(JSONMessage);

		    	break;
		    }
		    case "UI.GetLanguage":{

				var JSONMessage = {
					"jsonrpc"	:	"2.0",
					"id"		: 	request.id,
					"result":	{
						"resultCode" : "SUCCESS", //  type (enum) from AppLink protocol
						"method" : "UI.GetLanguageResponse",
						"hmiDisplayLanguage" : MFT.ApplinkModel.hmiUILanguage
					}
				};
				this.client.send(JSONMessage);

		    	break;
		    }
		    case "UI.ShowConstantTBT":{

				MFT.ApplinkModel.tbtActivate( request.params );

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.UpdateTurnList":{

				MFT.ApplinkModel.tbtTurnListUpdate( request.params );

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.AlertManeuver":{

				MFT.ApplinkModel.onUIAlertManeuver( request.params );

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case "UI.DialNumber":{

				MFT.ApplinkModel.dialNumber( request.params );

				this.sendUIResult("SUCCESS", request.id, request.method);

		    	break;
		    }
		    case  "UI.GetCapabilities":{
				// send repsonse
				var JSONMessage = {
					"jsonrpc"	:	"2.0",
					"id"		: 	request.id,
					"result"	:	{
						"displayCapabilities"	: {
							"displayType":	"GEN2_8_DMA",
							"textFields":[{
									"name":			"mainField1",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								},
								{
									"name":			"mainField2",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								},
								{
									"name":			"statusBar",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								},
								{
									"name":			"mediaClock",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								},
								{
									"name":			"mediaTrack",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								},
								{
									"name":			"alertText1",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								},
								{
									"name":			"alertText2",
									"characterSet":	"TYPE2SET",
									"width": 1,
									"rows": 1
								}],
							"mediaClockFormats":["CLOCK1", "CLOCK2", "CLOCKTEXT1", "CLOCKTEXT2", "CLOCKTEXT3"]
						},
						"hmiZoneCapabilities"	: ["FRONT","BACK"],
						"softButtonCapabilities":[{
							"shortPressAvailable":	true,
							"longPressAvailable":	true,
							"upDownAvailable":		true,
							"imageSupported":		true
						}],
						"method"	:	"UI.GetCapabilitiesResponse",
						"resultCode" : "SUCCESS" //  type (enum) from AppLink protocol
					}
				};

				this.client.send(JSONMessage);

				break;
			}

			default:{
				//statements_def
				break;
			}
		}
	},

	/*
	 * send response from onRPCRequest
	 */
	sendUIResult: function(resultCode, id, method) {

		Em.Logger.log("FFW.UI." + method + "Response");

		if(resultCode){

			// send repsonse
			var JSONMessage = {
				"jsonrpc"	:	"2.0",
				"id"		:	id,
				"result":	{
					"resultCode" : resultCode, //  type (enum) from AppLink protocol
					"method" : method + "Response"
				}
			};
			this.client.send(JSONMessage);
		}
	},

	sendSliderResult: function(resultCode, sliderRequestId, sliderPosition ) {
		var JSONMessage = {
				"jsonrpc"	:	"2.0",
				"id"		: 	sliderRequestId,
				"result":	{
					"resultCode" : resultCode, //  type (enum) from AppLink protocol
					"method" : "UI.SliderResponse"
				}
			};

		if( sliderPosition ){
			JSONMessage.result.sliderPosition = sliderPosition;
		}

		this.client.send(JSONMessage);
	},

	/*
	 * send notification when command was triggered
 	 */
	onCommand: function(commandId, appId) {
		Em.Logger.log("FFW.UI.onCommand");

		var JSONMessage = {
			"jsonrpc"	:	"2.0",
			"method"	:	"UI.OnCommand",
			"params"	:	{
				"commandId":	commandId,
				"appId":		appId
			}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * send notification when command was triggered
 	 */
	onCommandSoftButton: function(softButtonID, appId) {
		Em.Logger.log("FFW.UI.onCommand");

		var JSONMessage = {
			"jsonrpc"	:	"2.0",
			"method"	:	"UI.OnCommand",
			"params"	:	{
				"commandId":	softButtonID,
				"appId":		appId
			}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * send notification when command was triggered
 	 */
	interactionResponse: function( resultCode, performInteractionRequestId, commandId ) {
		Em.Logger.log("FFW.UI.PerformInteractionResponse");

		// send repsonse
		var JSONMessage = {
			"jsonrpc"	:	"2.0",
			"id"		: 	performInteractionRequestId,
			"result":	{
				"resultCode":		resultCode,
				"method":			"UI.PerformInteractionResponse"
			}
		};

		if( commandId ){
			JSONMessage.result.choiceID = commandId;
		}

		this.client.send(JSONMessage);
	},

	/*
	 * notification that UI is ready
	 * AppLinkCore should be sunscribed to this notification
 	 */
	onReady: function() {
		Em.Logger.log("FFW.UI.onReady");

		var JSONMessage = {
			"jsonrpc"	:	"2.0",
			"method"	:	"UI.OnReady"
		};
		this.client.send(JSONMessage);
	},

	/*
	 * send notification when DriverDistraction PopUp is visible
 	 */
	onDriverDistraction: function(driverDistractionState) {
		Em.Logger.log("FFW.UI.DriverDistraction");

		// send repsonse
		var JSONMessage = {
			"jsonrpc":	"2.0",
			"method":	"UI.OnDriverDistraction",
			"params":	{"state":	driverDistractionState, "appId" : 0}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * Notifies if system context is changed
 	 */
	OnSystemContext: function(systemContextValue) {
		Em.Logger.log("FFW.UI.OnSystemContext");

		// send repsonse
		var JSONMessage = {
			"jsonrpc":	"2.0",
			"method":	"UI.OnSystemContext",
			"params":	{"systemContext":	systemContextValue}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * Notifies if application was activated
 	 */
	OnAppActivated: function( appName ) {
		Em.Logger.log("FFW.UI.OnAppActivated");

		// send repsonse
		var JSONMessage = {
			"jsonrpc":	"2.0",
			"method":	"UI.OnAppActivated",
			"params":	{"appName":	appName}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * Notifies if device was choosed
 	 */
	OnDeviceChosen: function( deviceName ) {
		Em.Logger.log("FFW.UI.OnDeviceChosen");

		// send repsonse
		var JSONMessage = {
			"jsonrpc":	"2.0",
			"method":	"UI.OnDeviceChosen",
			"params":	{"deviceName":	deviceName}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * Notifies if applink UI components language was changed
 	 */
	OnLanguageChange: function( lang ) {
		Em.Logger.log("FFW.UI.OnLanguageChange");

		// send repsonse
		var JSONMessage = {
			"jsonrpc":	"2.0",
			"method":	"UI.OnLanguageChange",
			"params":	{"hmiDisplayLanguage":	lang}
		};
		this.client.send(JSONMessage);
	},

	/*
	 * Notifies if TBTClientState was activated
 	 */
	onTBTClientState: function( state, appId ) {
		Em.Logger.log("FFW.UI.OnTBTClientState");

		// send repsonse
		var JSONMessage = {
			"jsonrpc":	"2.0",
			"method":	"UI.OnTBTClientState",
			"params":	{
				"state":	state,
				"appId":	appId
			}
		};
		this.client.send(JSONMessage);
	},
})
