// Warning! This file is generated by './make_HMIRequests_class.py'. Edit at your own risk.
/**
 * @file hmi_requests.cc
 * @brief Generated class that process requests from qtHMI
 *
 * This file is a part of HMI D-Bus layer.
 */
// Copyright (c) 2014, Ford Motor Company
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following
// disclaimer in the documentation and/or other materials provided with the
// distribution.
//
// Neither the name of the Ford Motor Company nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 'A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#include "hmi_requests.h"

template<>
QJSValue HMIRequest::CreateQJSValue(Common_UserFriendlyMessage value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("messageCode", CreateQJSValue(value.messageCode));
  bject.setProperty("ttsString", value.ttsString.presence ? CreateQJSValue(value.ttsString.val) : QJSValue());
  bject.setProperty("label", value.label.presence ? CreateQJSValue(value.label.val) : QJSValue());
  bject.setProperty("line1", value.line1.presence ? CreateQJSValue(value.line1.val) : QJSValue());
  bject.setProperty("line2", value.line2.presence ? CreateQJSValue(value.line2.val) : QJSValue());
  bject.setProperty("textBody", value.textBody.presence ? CreateQJSValue(value.textBody.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_PermissionItem value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("name", CreateQJSValue(value.name));
  object.setProperty("id", CreateQJSValue(value.id));
  bject.setProperty("allowed", value.allowed.presence ? CreateQJSValue(value.allowed.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ServiceInfo value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("url", CreateQJSValue(value.url));
  bject.setProperty("policyAppId", value.policyAppId.presence ? CreateQJSValue(value.policyAppId.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TextField value){
  QJSValue object = hmi_callback_.engine()->newObject();
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ButtonCapabilities value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("name", CreateQJSValue(value.name));
  object.setProperty("shortPressAvailable", CreateQJSValue(value.shortPressAvailable));
  object.setProperty("longPressAvailable", CreateQJSValue(value.longPressAvailable));
  object.setProperty("upDownAvailable", CreateQJSValue(value.upDownAvailable));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_VehicleDataResult value){
  QJSValue object = hmi_callback_.engine()->newObject();
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TouchCoord value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("x", CreateQJSValue(value.x));
  object.setProperty("y", CreateQJSValue(value.y));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TouchEvent value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("id", CreateQJSValue(value.id));
  object.setProperty("ts", CreateQJSValue(value.ts));
  object.setProperty("c", CreateQJSValue(value.c));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_PresetBankCapabilities value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("onScreenPresetsAvailable", CreateQJSValue(value.onScreenPresetsAvailable));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_Image value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("value", CreateQJSValue(value.value));
  object.setProperty("imageType", CreateQJSValue(value.imageType));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_SoftButton value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("type", CreateQJSValue(value.type));
  bject.setProperty("text", value.text.presence ? CreateQJSValue(value.text.val) : QJSValue());
  bject.setProperty("image", value.image.presence ? CreateQJSValue(value.image.val) : QJSValue());
  bject.setProperty("isHighlighted", value.isHighlighted.presence ? CreateQJSValue(value.isHighlighted.val) : QJSValue());
  object.setProperty("softButtonID", CreateQJSValue(value.softButtonID));
  object.setProperty("systemAction", CreateQJSValue(value.systemAction));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TTSChunk value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("text", CreateQJSValue(value.text));
  object.setProperty("type", CreateQJSValue(value.type));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_HMIApplication value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("appName", CreateQJSValue(value.appName));
  bject.setProperty("ngnMediaScreenAppName", value.ngnMediaScreenAppName.presence ? CreateQJSValue(value.ngnMediaScreenAppName.val) : QJSValue());
  bject.setProperty("icon", value.icon.presence ? CreateQJSValue(value.icon.val) : QJSValue());
  object.setProperty("deviceName", CreateQJSValue(value.deviceName));
  object.setProperty("appID", CreateQJSValue(value.appID));
  object.setProperty("hmiDisplayLanguageDesired", CreateQJSValue(value.hmiDisplayLanguageDesired));
  object.setProperty("isMediaApplication", CreateQJSValue(value.isMediaApplication));
  bject.setProperty("appType", value.appType.presence ? CreateQJSValue(value.appType.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_MenuParams value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("parentID", value.parentID.presence ? CreateQJSValue(value.parentID.val) : QJSValue());
  bject.setProperty("position", value.position.presence ? CreateQJSValue(value.position.val) : QJSValue());
  object.setProperty("menuName", CreateQJSValue(value.menuName));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_Choice value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("choiceID", CreateQJSValue(value.choiceID));
  bject.setProperty("menuName", value.menuName.presence ? CreateQJSValue(value.menuName.val) : QJSValue());
  bject.setProperty("image", value.image.presence ? CreateQJSValue(value.image.val) : QJSValue());
  bject.setProperty("secondaryText", value.secondaryText.presence ? CreateQJSValue(value.secondaryText.val) : QJSValue());
  bject.setProperty("tertiaryText", value.tertiaryText.presence ? CreateQJSValue(value.tertiaryText.val) : QJSValue());
  bject.setProperty("secondaryImage", value.secondaryImage.presence ? CreateQJSValue(value.secondaryImage.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_VrHelpItem value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("text", CreateQJSValue(value.text));
  bject.setProperty("image", value.image.presence ? CreateQJSValue(value.image.val) : QJSValue());
  object.setProperty("position", CreateQJSValue(value.position));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TimeFormat value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("hours", CreateQJSValue(value.hours));
  object.setProperty("minutes", CreateQJSValue(value.minutes));
  object.setProperty("seconds", CreateQJSValue(value.seconds));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TouchEventCapabilities value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("pressAvailable", CreateQJSValue(value.pressAvailable));
  object.setProperty("multiTouchAvailable", CreateQJSValue(value.multiTouchAvailable));
  object.setProperty("doublePressAvailable", CreateQJSValue(value.doublePressAvailable));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ImageResolution value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("resolutionWidth", CreateQJSValue(value.resolutionWidth));
  object.setProperty("resolutionHeight", CreateQJSValue(value.resolutionHeight));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ScreenParams value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("resolution", CreateQJSValue(value.resolution));
  bject.setProperty("touchEventAvailable", value.touchEventAvailable.presence ? CreateQJSValue(value.touchEventAvailable.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ImageField value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("name", CreateQJSValue(value.name));
  bject.setProperty("imageTypeSupported", value.imageTypeSupported.presence ? CreateQJSValue(value.imageTypeSupported.val) : QJSValue());
  bject.setProperty("imageResolution", value.imageResolution.presence ? CreateQJSValue(value.imageResolution.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_DisplayCapabilities value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("displayType", CreateQJSValue(value.displayType));
  object.setProperty("textFields", CreateQJSValue(value.textFields));
  bject.setProperty("imageFields", value.imageFields.presence ? CreateQJSValue(value.imageFields.val) : QJSValue());
  object.setProperty("mediaClockFormats", CreateQJSValue(value.mediaClockFormats));
  bject.setProperty("imageCapabilities", value.imageCapabilities.presence ? CreateQJSValue(value.imageCapabilities.val) : QJSValue());
  object.setProperty("graphicSupported", CreateQJSValue(value.graphicSupported));
  object.setProperty("templatesAvailable", CreateQJSValue(value.templatesAvailable));
  bject.setProperty("screenParams", value.screenParams.presence ? CreateQJSValue(value.screenParams.val) : QJSValue());
  bject.setProperty("numCustomPresetsAvailable", value.numCustomPresetsAvailable.presence ? CreateQJSValue(value.numCustomPresetsAvailable.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_SoftButtonCapabilities value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("shortPressAvailable", CreateQJSValue(value.shortPressAvailable));
  object.setProperty("longPressAvailable", CreateQJSValue(value.longPressAvailable));
  object.setProperty("upDownAvailable", CreateQJSValue(value.upDownAvailable));
  object.setProperty("imageSupported", CreateQJSValue(value.imageSupported));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_AudioPassThruCapabilities value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("samplingRate", CreateQJSValue(value.samplingRate));
  object.setProperty("bitsPerSample", CreateQJSValue(value.bitsPerSample));
  object.setProperty("audioType", CreateQJSValue(value.audioType));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_Coordinate value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("xCoord", CreateQJSValue(value.xCoord));
  object.setProperty("yCoord", CreateQJSValue(value.yCoord));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TextFieldStruct value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("fieldName", CreateQJSValue(value.fieldName));
  object.setProperty("fieldText", CreateQJSValue(value.fieldText));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_KeyboardProperties value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("language", value.language.presence ? CreateQJSValue(value.language.val) : QJSValue());
  bject.setProperty("keyboardLayout", value.keyboardLayout.presence ? CreateQJSValue(value.keyboardLayout.val) : QJSValue());
  bject.setProperty("keypressMode", value.keypressMode.presence ? CreateQJSValue(value.keypressMode.val) : QJSValue());
  bject.setProperty("limitedCharacterList", value.limitedCharacterList.presence ? CreateQJSValue(value.limitedCharacterList.val) : QJSValue());
  bject.setProperty("autoCompleteText", value.autoCompleteText.presence ? CreateQJSValue(value.autoCompleteText.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_Turn value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("navigationText", value.navigationText.presence ? CreateQJSValue(value.navigationText.val) : QJSValue());
  bject.setProperty("turnIcon", value.turnIcon.presence ? CreateQJSValue(value.turnIcon.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_VehicleType value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("make", value.make.presence ? CreateQJSValue(value.make.val) : QJSValue());
  bject.setProperty("model", value.model.presence ? CreateQJSValue(value.model.val) : QJSValue());
  bject.setProperty("modelYear", value.modelYear.presence ? CreateQJSValue(value.modelYear.val) : QJSValue());
  bject.setProperty("trim", value.trim.presence ? CreateQJSValue(value.trim.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_DeviceInfo value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("name", CreateQJSValue(value.name));
  object.setProperty("id", CreateQJSValue(value.id));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_GPSData value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("longitudeDegrees", value.longitudeDegrees.presence ? CreateQJSValue(value.longitudeDegrees.val) : QJSValue());
  bject.setProperty("latitudeDegrees", value.latitudeDegrees.presence ? CreateQJSValue(value.latitudeDegrees.val) : QJSValue());
  bject.setProperty("utcYear", value.utcYear.presence ? CreateQJSValue(value.utcYear.val) : QJSValue());
  bject.setProperty("utcMonth", value.utcMonth.presence ? CreateQJSValue(value.utcMonth.val) : QJSValue());
  bject.setProperty("utcDay", value.utcDay.presence ? CreateQJSValue(value.utcDay.val) : QJSValue());
  bject.setProperty("utcHours", value.utcHours.presence ? CreateQJSValue(value.utcHours.val) : QJSValue());
  bject.setProperty("utcMinutes", value.utcMinutes.presence ? CreateQJSValue(value.utcMinutes.val) : QJSValue());
  bject.setProperty("utcSeconds", value.utcSeconds.presence ? CreateQJSValue(value.utcSeconds.val) : QJSValue());
  bject.setProperty("compassDirection", value.compassDirection.presence ? CreateQJSValue(value.compassDirection.val) : QJSValue());
  bject.setProperty("pdop", value.pdop.presence ? CreateQJSValue(value.pdop.val) : QJSValue());
  bject.setProperty("hdop", value.hdop.presence ? CreateQJSValue(value.hdop.val) : QJSValue());
  bject.setProperty("vdop", value.vdop.presence ? CreateQJSValue(value.vdop.val) : QJSValue());
  bject.setProperty("actual", value.actual.presence ? CreateQJSValue(value.actual.val) : QJSValue());
  bject.setProperty("satellites", value.satellites.presence ? CreateQJSValue(value.satellites.val) : QJSValue());
  bject.setProperty("dimension", value.dimension.presence ? CreateQJSValue(value.dimension.val) : QJSValue());
  bject.setProperty("altitude", value.altitude.presence ? CreateQJSValue(value.altitude.val) : QJSValue());
  bject.setProperty("heading", value.heading.presence ? CreateQJSValue(value.heading.val) : QJSValue());
  bject.setProperty("speed", value.speed.presence ? CreateQJSValue(value.speed.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_SingleTireStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("status", CreateQJSValue(value.status));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_DIDResult value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("resultCode", CreateQJSValue(value.resultCode));
  object.setProperty("didLocation", CreateQJSValue(value.didLocation));
  bject.setProperty("data", value.data.presence ? CreateQJSValue(value.data.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_HeadLampStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("lowBeamsOn", CreateQJSValue(value.lowBeamsOn));
  object.setProperty("highBeamsOn", CreateQJSValue(value.highBeamsOn));
  object.setProperty("ambientLightSensorStatus", CreateQJSValue(value.ambientLightSensorStatus));
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_TireStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("pressureTelltale", value.pressureTelltale.presence ? CreateQJSValue(value.pressureTelltale.val) : QJSValue());
  bject.setProperty("leftFront", value.leftFront.presence ? CreateQJSValue(value.leftFront.val) : QJSValue());
  bject.setProperty("rightFront", value.rightFront.presence ? CreateQJSValue(value.rightFront.val) : QJSValue());
  bject.setProperty("leftRear", value.leftRear.presence ? CreateQJSValue(value.leftRear.val) : QJSValue());
  bject.setProperty("rightRear", value.rightRear.presence ? CreateQJSValue(value.rightRear.val) : QJSValue());
  bject.setProperty("innerLeftRear", value.innerLeftRear.presence ? CreateQJSValue(value.innerLeftRear.val) : QJSValue());
  bject.setProperty("innerRightRear", value.innerRightRear.presence ? CreateQJSValue(value.innerRightRear.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_BeltStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("driverBeltDeployed", value.driverBeltDeployed.presence ? CreateQJSValue(value.driverBeltDeployed.val) : QJSValue());
  bject.setProperty("passengerBeltDeployed", value.passengerBeltDeployed.presence ? CreateQJSValue(value.passengerBeltDeployed.val) : QJSValue());
  bject.setProperty("passengerBuckleBelted", value.passengerBuckleBelted.presence ? CreateQJSValue(value.passengerBuckleBelted.val) : QJSValue());
  bject.setProperty("driverBuckleBelted", value.driverBuckleBelted.presence ? CreateQJSValue(value.driverBuckleBelted.val) : QJSValue());
  bject.setProperty("leftRow2BuckleBelted", value.leftRow2BuckleBelted.presence ? CreateQJSValue(value.leftRow2BuckleBelted.val) : QJSValue());
  bject.setProperty("passengerChildDetected", value.passengerChildDetected.presence ? CreateQJSValue(value.passengerChildDetected.val) : QJSValue());
  bject.setProperty("rightRow2BuckleBelted", value.rightRow2BuckleBelted.presence ? CreateQJSValue(value.rightRow2BuckleBelted.val) : QJSValue());
  bject.setProperty("middleRow2BuckleBelted", value.middleRow2BuckleBelted.presence ? CreateQJSValue(value.middleRow2BuckleBelted.val) : QJSValue());
  bject.setProperty("middleRow3BuckleBelted", value.middleRow3BuckleBelted.presence ? CreateQJSValue(value.middleRow3BuckleBelted.val) : QJSValue());
  bject.setProperty("leftRow3BuckleBelted", value.leftRow3BuckleBelted.presence ? CreateQJSValue(value.leftRow3BuckleBelted.val) : QJSValue());
  bject.setProperty("rightRow3BuckleBelted", value.rightRow3BuckleBelted.presence ? CreateQJSValue(value.rightRow3BuckleBelted.val) : QJSValue());
  bject.setProperty("leftRearInflatableBelted", value.leftRearInflatableBelted.presence ? CreateQJSValue(value.leftRearInflatableBelted.val) : QJSValue());
  bject.setProperty("rightRearInflatableBelted", value.rightRearInflatableBelted.presence ? CreateQJSValue(value.rightRearInflatableBelted.val) : QJSValue());
  bject.setProperty("middleRow1BeltDeployed", value.middleRow1BeltDeployed.presence ? CreateQJSValue(value.middleRow1BeltDeployed.val) : QJSValue());
  bject.setProperty("middleRow1BuckleBelted", value.middleRow1BuckleBelted.presence ? CreateQJSValue(value.middleRow1BuckleBelted.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_BodyInformation value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("parkBrakeActive", CreateQJSValue(value.parkBrakeActive));
  object.setProperty("ignitionStableStatus", CreateQJSValue(value.ignitionStableStatus));
  object.setProperty("ignitionStatus", CreateQJSValue(value.ignitionStatus));
  bject.setProperty("driverDoorAjar", value.driverDoorAjar.presence ? CreateQJSValue(value.driverDoorAjar.val) : QJSValue());
  bject.setProperty("passengerDoorAjar", value.passengerDoorAjar.presence ? CreateQJSValue(value.passengerDoorAjar.val) : QJSValue());
  bject.setProperty("rearLeftDoorAjar", value.rearLeftDoorAjar.presence ? CreateQJSValue(value.rearLeftDoorAjar.val) : QJSValue());
  bject.setProperty("rearRightDoorAjar", value.rearRightDoorAjar.presence ? CreateQJSValue(value.rearRightDoorAjar.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_DeviceStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
  bject.setProperty("voiceRecOn", value.voiceRecOn.presence ? CreateQJSValue(value.voiceRecOn.val) : QJSValue());
  bject.setProperty("btIconOn", value.btIconOn.presence ? CreateQJSValue(value.btIconOn.val) : QJSValue());
  bject.setProperty("callActive", value.callActive.presence ? CreateQJSValue(value.callActive.val) : QJSValue());
  bject.setProperty("phoneRoaming", value.phoneRoaming.presence ? CreateQJSValue(value.phoneRoaming.val) : QJSValue());
  bject.setProperty("textMsgAvailable", value.textMsgAvailable.presence ? CreateQJSValue(value.textMsgAvailable.val) : QJSValue());
  bject.setProperty("battLevelStatus", value.battLevelStatus.presence ? CreateQJSValue(value.battLevelStatus.val) : QJSValue());
  bject.setProperty("stereoAudioOutputMuted", value.stereoAudioOutputMuted.presence ? CreateQJSValue(value.stereoAudioOutputMuted.val) : QJSValue());
  bject.setProperty("monoAudioOutputMuted", value.monoAudioOutputMuted.presence ? CreateQJSValue(value.monoAudioOutputMuted.val) : QJSValue());
  bject.setProperty("signalLevelStatus", value.signalLevelStatus.presence ? CreateQJSValue(value.signalLevelStatus.val) : QJSValue());
  bject.setProperty("primaryAudioSource", value.primaryAudioSource.presence ? CreateQJSValue(value.primaryAudioSource.val) : QJSValue());
  bject.setProperty("eCallEventActive", value.eCallEventActive.presence ? CreateQJSValue(value.eCallEventActive.val) : QJSValue());
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ECallInfo value){
  QJSValue object = hmi_callback_.engine()->newObject();
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_AirbagStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_EmergencyEvent value){
  QJSValue object = hmi_callback_.engine()->newObject();
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_ClusterModeStatus value){
  QJSValue object = hmi_callback_.engine()->newObject();
}

template<>
QJSValue HMIRequest::CreateQJSValue(Common_MyKey value){
  QJSValue object = hmi_callback_.engine()->newObject();
  object.setProperty("e911Override", CreateQJSValue(value.e911Override));
}

HMIRequest::HMIRequest(QDBusInterface *interface, QString name, QList<QVariant> args, QJSValue hmi_callback):
      interface_(interface), name_(name), args_(args), hmi_callback_(hmi_callback) {
  QDBusPendingCall pcall = interface->asyncCallWithArgumentList(name, args);
  watcher_ = new QDBusPendingCallWatcher(pcall);
  QObject::connect(watcher_, SIGNAL(finished(QDBusPendingCallWatcher*)), this, SLOT(invokeCallback()));
}

void HMIRequest::invokeCallback() {
  if (!hmi_callback_.isUndefined()) {
    QJSValueList qjsValueList;
    qjsValueList = this->fillArgsList();
    hmi_callback_.call(qjsValueList);
  }
  watcher_->deleteLater();
  this->deleteLater();
}

void SDL_ActivateApp::fillArgsList() {
  QDBusPendingReply< Boolean,OptionalArgument<Common_DeviceInfo>,Boolean,Boolean,OptionalArgument<QList<Common_PermissionItem>>,Boolean,OptionalArgument<Common_AppPriority> > reply = *watcher_;
  QJSValueList qjsValueList;

  QJSValue param = CreateQJSValue(reply.argumentAt<0>();
  qjsValueList.append(param);
  if (reply.argumentAt<1>().presence) {
    QJSValue param = CreateQJSValue(reply.argumentAt<1>().val);
    qjsValueList.append(param);
  }
  QJSValue param = CreateQJSValue(reply.argumentAt<2>();
  qjsValueList.append(param);
  QJSValue param = CreateQJSValue(reply.argumentAt<3>();
  qjsValueList.append(param);
  if (reply.argumentAt<4>().presence) {
    QJSValue param = CreateQJSValue(reply.argumentAt<4>().val);
    qjsValueList.append(param);
  }
  QJSValue param = CreateQJSValue(reply.argumentAt<5>();
  qjsValueList.append(param);
  if (reply.argumentAt<6>().presence) {
    QJSValue param = CreateQJSValue(reply.argumentAt<6>().val);
    qjsValueList.append(param);
  }
  return qjsValueList;
}

void SDL_GetUserFriendlyMessage::fillArgsList() {
  QDBusPendingReply< OptionalArgument<QList<Common_UserFriendlyMessage>> > reply = *watcher_;
  QJSValueList qjsValueList;

  if (reply.argumentAt<0>().presence) {
    QJSValue param = CreateQJSValue(reply.argumentAt<0>().val);
    qjsValueList.append(param);
  }
  return qjsValueList;
}

void SDL_GetListOfPermissions::fillArgsList() {
  QDBusPendingReply< QList<Common_PermissionItem> > reply = *watcher_;
  QJSValueList qjsValueList;

  QJSValue param = CreateQJSValue(reply.argumentAt<0>();
  qjsValueList.append(param);
  return qjsValueList;
}

void SDL_UpdateSDL::fillArgsList() {
  QDBusPendingReply< Common_UpdateResult > reply = *watcher_;
  QJSValueList qjsValueList;

  QJSValue param = CreateQJSValue(reply.argumentAt<0>();
  qjsValueList.append(param);
  return qjsValueList;
}

void SDL_GetStatusUpdate::fillArgsList() {
  QDBusPendingReply< Common_UpdateResult > reply = *watcher_;
  QJSValueList qjsValueList;

  QJSValue param = CreateQJSValue(reply.argumentAt<0>();
  qjsValueList.append(param);
  return qjsValueList;
}

void SDL_GetURLS::fillArgsList() {
  QDBusPendingReply< OptionalArgument<QList<Common_ServiceInfo>> > reply = *watcher_;
  QJSValueList qjsValueList;

  if (reply.argumentAt<0>().presence) {
    QJSValue param = CreateQJSValue(reply.argumentAt<0>().val);
    qjsValueList.append(param);
  }
  return qjsValueList;
}

